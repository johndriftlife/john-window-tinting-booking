import { useEffect,useState } from 'react'
const API=process.env.NEXT_PUBLIC_API_BASE_URL||''
export default function AdminSettings(){const[key,setKey]=useState('');const[cfg,setCfg]=useState(null);const[s,setS]=useState([]);const[sid,setSid]=useState('');const[sh,setSh]=useState([]);const[msg,setMsg]=useState('');useEffect(()=>{if(API)fetch(`${API}/api/services`).then(r=>r.json()).then(setS)},[]);const loadCfg=async()=>{setMsg('');try{const r=await fetch(`${API}/api/config`);const d=await r.json();setCfg(d)}catch{setMsg('Failed to load config')}};const saveCfg=async()=>{setMsg('');try{const r=await fetch(`${API}/api/config`,{method:'PUT',headers:{'Content-Type':'application/json','X-Admin-Key':key},body:JSON.stringify(cfg)});if(!r.ok)throw new Error('Save failed');setMsg('Saved ✔')}catch(e){setMsg(e.message)}};const loadShades=async(svc)=>{setSid(svc);if(!svc){setSh([]);return}const r=await fetch(`${API}/api/shades?serviceId=${svc}`);const data=await r.json();const standard=svc&&s.find(x=>String(x.id)===String(svc))?.name.includes('Ceramic')?['5%','20%']:['1%','5%','20%','35%','50%'];const merged=standard.map(l=>({label:l,enabled:data.includes(l)}));setSh(merged)};const toggleShade=async(label,enabled)=>{setMsg('');try{const r=await fetch(`${API}/api/shades/toggle`,{method:'POST',headers:{'Content-Type':'application/json','X-Admin-Key':key},body:JSON.stringify({serviceId:Number(sid),label,enabled})});if(!r.ok)throw new Error('Toggle failed');loadShades(sid)}catch(e){setMsg(e.message)}};return(<div className='container'><div style={{textAlign:'center'}}><a href='/' className='btn'>← Back to Booking</a></div><h1>Admin — Settings</h1><label>Admin key<input value={key} onChange={e=>setKey(e.target.value)} placeholder='Enter admin key' /></label><div className='card'><h3>Business hours</h3><button onClick={loadCfg}>Load current</button>{cfg&&(<div style={{display:'grid',gap:10,marginTop:10}}><label>Closed days (0=Sun..6=Sat)<input value={(cfg.closedDays||[]).join(',')} onChange={e=>setCfg(v=>({...v,closedDays:e.target.value.split(',').map(x=>Number(x.trim())).filter(x=>!isNaN(x))}))} /></label><label>Weekday slots (Tue–Fri, HH:MM comma-separated)<input value={(cfg.weekdaySlots||[]).join(',')} onChange={e=>setCfg(v=>({...v,weekdaySlots:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}))} /></label><label>Saturday slots (HH:MM comma-separated)<input value={(cfg.saturdaySlots||[]).join(',')} onChange={e=>setCfg(v=>({...v,saturdaySlots:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}))} /></label><label>Sunday slots (HH:MM comma-separated)<input value={(cfg.sundaySlots||[]).join(',')} onChange={e=>setCfg(v=>({...v,sundaySlots:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}))} /></label><label><input type='checkbox' checked={!!cfg.saturdayTwoHourSpacing} onChange={e=>setCfg(v=>({...v,saturdayTwoHourSpacing:e.target.checked}))} /> Saturday 2‑hour spacing</label><button onClick={saveCfg}>Save settings</button></div>)}</div><div className='card'><h3>Tint shades</h3><label>Service<select value={sid} onChange={e=>loadShades(e.target.value)}><option value=''>Choose service</option>{s.map(x=><option key={x.id} value={x.id}>{x.name}</option>)}</select></label>{sid&&(<div style={{marginTop:10}}>{sh.map(q=>(<div key={q.label} style={{display:'flex',alignItems:'center',justifyContent:'space-between',marginBottom:8}}><span>{q.label}</span><label style={{display:'flex',alignItems:'center',gap:8}}><input type='checkbox' checked={q.enabled} onChange={e=>toggleShade(q.label,e.target.checked)} />{q.enabled?'Enabled':'Disabled'}</label></div>))}</div>)}</div>{msg&&<div style={{marginTop:10,color:'#ff6b6b'}}>{msg}</div>}</div>)}